import robocorp.log._lifecycle_hooks as @robo_lifecycle_hooks

def method():
    try:
        @robo_lifecycle_hooks.before_method('GENERATOR', __name__, __file__, 'method', 3, {})
        @robo_lifecycle_hooks.before_yield_from(__name__, __file__, 'method', 3)
        x = (yield from foo())
        @robo_lifecycle_hooks.after_yield_from(__name__, __file__, 'method', 3)
        @robo_lifecycle_hooks.after_assign(__name__, __file__, 'method', 3, 'x', x)
        @robo_lifecycle_hooks.before_yield_from(__name__, __file__, 'method', 4)
        yield from another()
        @robo_lifecycle_hooks.after_yield_from(__name__, __file__, 'method', 4)
    except:
        import sys as @py_sys
        @robo_lifecycle_hooks.method_except('GENERATOR', __name__, __file__, 'method', 4, @py_sys.exc_info())
        raise
    finally:
        @robo_lifecycle_hooks.after_method('GENERATOR', __name__, __file__, 'method', 4)